["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$update"]],"~:name","~$clojure.math.combinatorics","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$+'",["^ ","^6","~$clojure.math.combinatorics/+'","~:file","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","~:line",85,"~:column",10,"~:end-line",85,"~:end-column",17,"~:meta",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",85,"^A",15,"^B",85,"^C",17],"~:tag","~$number"],"~$expt-int",["^ ","~:protocol-inline",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",524,"^A",8,"^B",524,"^C",16,"~:private",true,"~:arglists",["~#list",["~$quote",["^K",[["~$base","~$pow"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/expt-int","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",16,"~:method-params",["^K",[["^M","^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^A",1,"~:variadic?",false,"^@",524,"~:ret-tag","~$any","^B",524,"~:max-fixed-arity",2,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M","^N"]]]]]],"~$permutation-index-duplicates",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",626,"^A",8,"^B",626,"^C",36,"^I",true,"^J",["^K",["^L",["^K",[["~$l"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/permutation-index-duplicates","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",36,"^P",["^K",[["~$l"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",626,"^T","^U","^B",626,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$l"]]]]]],"~$nth-combination",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",578,"^A",7,"^B",578,"^C",22,"^J",["^K",["^L",["^K",[["~$items","~$t","~$n"]]]]],"~:doc","The nth element of the sequence of t-combinations of items"],"^6","~$clojure.math.combinatorics/nth-combination","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",22,"^P",["^K",[["^[","~$t","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",578,"^T",["^4",[null,"~$clj","^U"]],"^B",578,"^V",3,"^W",true,"^J",["^K",["^L",["^K",[["^[","~$t","~$n"]]]]],"^10","The nth element of the sequence of t-combinations of items"],"~$partitions",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",929,"^A",7,"^B",929,"^C",17,"^J",["^K",["^L",["^K",[["^[","~$&","~$args"]]]]],"^10","All the lexicographic distinct partitions of items.\n    Optionally pass in :min and/or :max to specify inclusive bounds on the number of parts the items can be split into.","~:top-fn",["^ ","^S",true,"~:fixed-arity",1,"^V",1,"^P",[["^K",["^[","^14"]]],"^J",["^K",[["^[","~$&","^14"]]],"^R",["^K",[null]]]],"^6","~$clojure.math.combinatorics/partitions","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",17,"^15",["^ ","^S",true,"^16",1,"^V",1,"^P",[["^K",["^[","^14"]]],"^J",["^K",[["^[","~$&","^14"]]],"^R",["^K",[null]]],"^P",[["^K",["^[","^14"]]],"^Q",null,"^16",1,"^R",["^K",[null]],"^A",1,"^S",true,"~:methods",[["^ ","^16",1,"^S",true,"^E","^U"]],"^@",929,"^T","^U","^B",929,"^V",1,"^W",true,"^J",["^K",[["^[","~$&","^14"]]],"^10","All the lexicographic distinct partitions of items.\n    Optionally pass in :min and/or :max to specify inclusive bounds on the number of parts the items can be split into."],"~$all-different?",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",100,"^A",8,"^B",100,"^C",22,"^I",true,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^10","Annoyingly, the built-in distinct? doesn't handle 0 args, so we need\n  to write our own version that considers the empty-list to be distinct"],"^I",true,"^6","~$clojure.math.combinatorics/all-different?","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",22,"^P",["^K",[["~$s"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",100,"^T",["^4",["~$boolean","^U"]],"^B",100,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^10","Annoyingly, the built-in distinct? doesn't handle 0 args, so we need\n  to write our own version that considers the empty-list to be distinct"],"~$nth-permutation-duplicates",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",423,"^A",8,"^B",423,"^C",34,"^I",true,"^J",["^K",["^L",["^K",[["~$l","~$n"]]]]],"^10","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"^I",true,"^6","~$clojure.math.combinatorics/nth-permutation-duplicates","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",34,"^P",["^K",[["~$l","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",423,"^T",["^4",["^12","~$cljs.core/IVector"]],"^B",423,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$l","~$n"]]]]],"^10","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"~$count-permutations-from-frequencies",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",362,"^A",8,"^B",362,"^C",43,"^I",true,"^J",["^K",["^L",["^K",[["~$freqs"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/count-permutations-from-frequencies","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",43,"^P",["^K",[["^1@"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",362,"^T",["^4",[null,"^U"]],"^B",362,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^1@"]]]]]],"~$nth-combination-freqs",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",561,"^A",8,"^B",561,"^C",29,"^I",true,"^J",["^K",["^L",["^K",[["^1@","~$t","~$n"]]]]],"^10","The nth element of the sequence of t-combinations of the multiset\nrepresented by freqs"],"^I",true,"^6","~$clojure.math.combinatorics/nth-combination-freqs","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",29,"^P",["^K",[["^1@","~$t","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",561,"^T",["^4",[null,"^12","^U"]],"^B",561,"^V",3,"^W",true,"^J",["^K",["^L",["^K",[["^1@","~$t","~$n"]]]]],"^10","The nth element of the sequence of t-combinations of the multiset\nrepresented by freqs"],"~$partitions-M",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",902,"^A",8,"^B",902,"^C",20,"^I",true,"^J",["^K",["^L",["^K",[["^[","~$&",["^ ","~$from","~:min","~$to","~:max"]]]]]],"^15",["^ ","^S",true,"^16",1,"^V",1,"^P",[["^K",["^[",["^ ","^1E","^1F","^1G","^1H"]]]],"^J",["^K",[["^[","~$&",["^ ","^1E","^1F","^1G","^1H"]]]],"^R",["^K",[null]]]],"^I",true,"^6","~$clojure.math.combinatorics/partitions-M","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",20,"^15",["^ ","^S",true,"^16",1,"^V",1,"^P",[["^K",["^[",["^ ","^1E","^1F","^1G","^1H"]]]],"^J",["^K",[["^[","~$&",["^ ","^1E","^1F","^1G","^1H"]]]],"^R",["^K",[null]]],"^P",[["^K",["^[",["^ ","^1E","^1F","^1G","^1H"]]]],"^Q",null,"^16",1,"^R",["^K",[null]],"^A",1,"^S",true,"^18",[["^ ","^16",1,"^S",true,"^E",["^4",["~$seq","~$cljs.core/IList","~$cljs.core/LazySeq"]]]],"^@",902,"^T","^U","^B",902,"^V",1,"^W",true,"^J",["^K",[["^[","~$&",["^ ","^1E","^1F","^1G","^1H"]]]]],"~$nth-permutation",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",441,"^A",7,"^B",441,"^C",22,"^J",["^K",["^L",["^K",[["^[","~$n"]]]]],"^10","(nth (permutations items)) but calculated more directly."],"^6","~$clojure.math.combinatorics/nth-permutation","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",22,"^P",["^K",[["^[","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",441,"^T",["^4",["^12","^1>","^U","~$cljs.core/MetaFn","~$clj-nil"]],"^B",441,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["^[","~$n"]]]]],"^10","(nth (permutations items)) but calculated more directly."],"~$remove-nth",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",338,"^A",8,"^B",338,"^C",18,"^I",true,"^J",["^K",["^L",["^K",[["~$l","~$n"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/remove-nth","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",18,"^P",["^K",[["~$l","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",338,"^T",["^4",[null,"^12","^U"]],"^B",338,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$l","~$n"]]]]]],"~$n-take-k",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",485,"^A",8,"^B",485,"^C",16,"^I",true,"^J",["^K",["^L",["^K",[["~$n","~$k"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/n-take-k","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",16,"^P",["^K",[["~$n","~$k"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",485,"^T",["^4",[null,"^F"]],"^B",485,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$n","~$k"]]]]]],"~$join",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",87,"^A",8,"^B",87,"^C",12,"^I",true,"^J",["^K",["^L",["^K",[["~$colls"]]]]],"^10","Lazily concatenates a collection of collections into a flat sequence,\n  because Clojure's `apply concat` is insufficiently lazy."],"^I",true,"^6","~$clojure.math.combinatorics/join","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",12,"^P",["^K",[["^1V"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",87,"^T","^1L","^B",87,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^1V"]]]]],"^10","Lazily concatenates a collection of collections into a flat sequence,\n  because Clojure's `apply concat` is insufficiently lazy."],"~$permutation-index-distinct",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",618,"^A",8,"^B",618,"^C",34,"^I",true,"^J",["^K",["^L",["^K",[["~$l"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/permutation-index-distinct","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",34,"^P",["^K",[["~$l"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",618,"^T","^U","^B",618,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$l"]]]]]],"~$partitions-H",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",751,"^A",8,"^B",751,"^C",20,"^I",true,"^J",["^K",["^L",["^K",[["^[","~$&","^14"]]]]],"^15",["^ ","^S",true,"^16",1,"^V",1,"^P",[["^K",["^[","^14"]]],"^J",["^K",[["^[","~$&","^14"]]],"^R",["^K",[null]]]],"^I",true,"^6","~$clojure.math.combinatorics/partitions-H","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",20,"^15",["^ ","^S",true,"^16",1,"^V",1,"^P",[["^K",["^[","^14"]]],"^J",["^K",[["^[","~$&","^14"]]],"^R",["^K",[null]]],"^P",[["^K",["^[","^14"]]],"^Q",null,"^16",1,"^R",["^K",[null]],"^A",1,"^S",true,"^18",[["^ ","^16",1,"^S",true,"^E","^1L"]],"^@",751,"^T","^U","^B",751,"^V",1,"^W",true,"^J",["^K",[["^[","~$&","^14"]]]],"~$growth-strings-H",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",681,"^A",8,"^B",681,"^C",24,"^I",true,"^J",["^K",["^L",["^K",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]]]],"^15",["^ ","^S",false,"^16",5,"^V",5,"^P",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]],"^J",["^K",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^R",["^K",[null,null]]]],"^I",true,"^6","~$clojure.math.combinatorics/growth-strings-H","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",24,"^15",["^ ","^S",false,"^16",5,"^V",5,"^P",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]],"^J",["^K",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^R",["^K",[null,null]]],"^P",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]],"^Q",null,"^16",5,"^R",["^K",[null,null]],"^A",1,"^S",false,"^18",[["^ ","^16",3,"^S",false,"^E","^U"],["^ ","^16",5,"^S",false,"^E","^12"]],"^@",681,"^B",681,"^V",5,"^W",true,"^J",["^K",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]]],"~$reify-bool",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",671,"^A",12,"^B",671,"^C",22,"^I",true,"^J",["^K",["^L",["^K",[["~$statement"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/reify-bool","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",22,"^P",["^K",[["^23"]]],"^Q",null,"^R",["^K",[null,null]],"^A",5,"^S",false,"^@",671,"^T","^F","^B",671,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^23"]]]]]],"~$count-subsets-unmemoized",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",532,"^A",8,"^B",532,"^C",32,"^I",true,"^J",["^K",["^L",["^K",[["^["]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/count-subsets-unmemoized","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",32,"^P",["^K",[["^["]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",532,"^T",["^4",["^U","^F"]],"^B",532,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^["]]]]]],"~$lex-partitions-H",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",732,"^A",8,"^B",732,"^C",24,"^I",true,"^J",["^K",["^L",["^K",[["~$N","~$&",["^ ","^1E","^1F","^1G","^1H"]]]]]],"^15",["^ ","^S",true,"^16",1,"^V",1,"^P",[["^K",["~$N",["^ ","^1E","^1F","^1G","^1H"]]]],"^J",["^K",[["~$N","~$&",["^ ","^1E","^1F","^1G","^1H"]]]],"^R",["^K",[null]]]],"^I",true,"^6","~$clojure.math.combinatorics/lex-partitions-H","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",24,"^15",["^ ","^S",true,"^16",1,"^V",1,"^P",[["^K",["~$N",["^ ","^1E","^1F","^1G","^1H"]]]],"^J",["^K",[["~$N","~$&",["^ ","^1E","^1F","^1G","^1H"]]]],"^R",["^K",[null]]],"^P",[["^K",["~$N",["^ ","^1E","^1F","^1G","^1H"]]]],"^Q",null,"^16",1,"^R",["^K",[null]],"^A",1,"^S",true,"^18",[["^ ","^16",1,"^S",true,"^E",["^4",["^1J","^1K","^1L"]]]],"^@",732,"^T","^U","^B",732,"^V",1,"^W",true,"^J",["^K",[["~$N","~$&",["^ ","^1E","^1F","^1G","^1H"]]]]],"~$nth-combination-distinct",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",547,"^A",8,"^B",547,"^C",32,"^I",true,"^J",["^K",["^L",["^K",[["^[","~$t","~$n"]]]]],"^10","The nth element of the sequence of t-combinations of items,\nwhere items is a collection of distinct elements"],"^I",true,"^6","~$clojure.math.combinatorics/nth-combination-distinct","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",32,"^P",["^K",[["^[","~$t","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",547,"^T",["^4",[null,"^12","^U"]],"^B",547,"^V",3,"^W",true,"^J",["^K",["^L",["^K",[["^[","~$t","~$n"]]]]],"^10","The nth element of the sequence of t-combinations of items,\nwhere items is a collection of distinct elements"],"~$drop-permutations",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",459,"^A",7,"^B",459,"^C",24,"^J",["^K",["^L",["^K",[["^[","~$n"]]]]],"^10","(drop n (permutations items)) but calculated more directly."],"^6","~$clojure.math.combinatorics/drop-permutations","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",24,"^P",["^K",[["^[","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",459,"^T",["^4",["^12","^1K","^1L","^1P"]],"^B",459,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["^[","~$n"]]]]],"^10","(drop n (permutations items)) but calculated more directly."],"~$factorial-numbers",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",326,"^A",8,"^B",326,"^C",25,"^I",true,"^J",["^K",["^L",["^K",[["~$n"]]]]],"^10","Input is a non-negative base 10 integer, output is the number in the\nfactorial number system (http://en.wikipedia.org/wiki/Factorial_number_system)\nexpressed as a list of 'digits'"],"^I",true,"^6","~$clojure.math.combinatorics/factorial-numbers","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",25,"^P",["^K",[["~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",326,"^T",["^4",["^12","^1K"]],"^B",326,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$n"]]]]],"^10","Input is a non-negative base 10 integer, output is the number in the\nfactorial number system (http://en.wikipedia.org/wiki/Factorial_number_system)\nexpressed as a list of 'digits'"],"~$count-combinations",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",518,"^A",7,"^B",518,"^C",25,"^J",["^K",["^L",["^K",[["^[","~$t"]]]]],"^10","(count (combinations items t)) but computed more directly"],"^6","~$clojure.math.combinatorics/count-combinations","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",25,"^P",["^K",[["^[","~$t"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",518,"^B",518,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["^[","~$t"]]]]],"^10","(count (combinations items t)) but computed more directly"],"~$m5",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",856,"^A",8,"^B",856,"^C",10,"^I",true,"^J",["^K",["^L",["^K",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/m5","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",10,"^P",["^K",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",856,"^T",["^4",["^12","^U"]],"^B",856,"^V",11,"^W",true,"^J",["^K",["^L",["^K",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"~$cartesian-product",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",224,"^A",7,"^B",224,"^C",24,"^J",["^K",["^L",["^K",[["~$&","~$seqs"]]]]],"^10","All the ways to take one item from each sequence","^15",["^ ","^S",true,"^16",0,"^V",0,"^P",[["^K",["^2D"]]],"^J",["^K",[["~$&","^2D"]]],"^R",["^K",[null]]]],"^6","~$clojure.math.combinatorics/cartesian-product","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",24,"^15",["^ ","^S",true,"^16",0,"^V",0,"^P",[["^K",["^2D"]]],"^J",["^K",[["~$&","^2D"]]],"^R",["^K",[null]]],"^P",[["^K",["^2D"]]],"^Q",null,"^16",0,"^R",["^K",[null]],"^A",1,"^S",true,"^18",[["^ ","^16",0,"^S",true,"^E",["^4",["^1L","^1P"]]]],"^@",224,"^T","^U","^B",224,"^V",0,"^W",true,"^J",["^K",[["~$&","^2D"]]],"^10","All the ways to take one item from each sequence"],"~$permutations",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",295,"^A",7,"^B",295,"^C",19,"^J",["^K",["^L",["^K",[["^["]]]]],"^10","All the distinct permutations of items, lexicographic by index \n  (special handling for duplicate items)."],"^6","~$clojure.math.combinatorics/permutations","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",19,"^P",["^K",[["^["]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",295,"^T","^1L","^B",295,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^["]]]]],"^10","All the distinct permutations of items, lexicographic by index \n  (special handling for duplicate items)."],"~$initial-perm-numbers",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",374,"^A",8,"^B",374,"^C",28,"^I",true,"^J",["^K",["^L",["^K",[["^1@"]]]]],"^10","Takes a sorted frequency map and returns how far into the sequence of\nlexicographic permutations you get by varying the first item"],"^I",true,"^6","~$clojure.math.combinatorics/initial-perm-numbers","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",28,"^P",["^K",[["^1@"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",374,"^T","^12","^B",374,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^1@"]]]]],"^10","Takes a sorted frequency map and returns how far into the sequence of\nlexicographic permutations you get by varying the first item"],"~$count-subsets",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",540,"^A",7,"^B",540,"^C",20,"^J",["^K",["^L",["^K",[["^["]]]]],"^10","(count (subsets items)) but computed more directly"],"^6","~$clojure.math.combinatorics/count-subsets","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",20,"^P",["^K",[["^["]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",540,"^B",540,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^["]]]]],"^10","(count (subsets items)) but computed more directly"],"~$factorial-numbers-with-duplicates",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",411,"^A",8,"^B",411,"^C",41,"^I",true,"^J",["^K",["^L",["^K",[["~$n","^1@"]]]]],"^10","Input is a non-negative base 10 integer n, and a sorted frequency map freqs.\nOutput is a list of 'digits' in this wacky duplicate factorial number system"],"^I",true,"^6","~$clojure.math.combinatorics/factorial-numbers-with-duplicates","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",41,"^P",["^K",[["~$n","^1@"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",411,"^T",["^4",[null,"^12","^U"]],"^B",411,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$n","^1@"]]]]],"^10","Input is a non-negative base 10 integer n, and a sorted frequency map freqs.\nOutput is a list of 'digits' in this wacky duplicate factorial number system"],"~$init",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",674,"^A",8,"^B",674,"^C",12,"^I",true,"^J",["^K",["^L",["^K",[["~$n","~$s"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/init","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",12,"^P",["^K",[["~$n","~$s"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",674,"^T",["^4",["^12","^1>","^U","^1O","^1P"]],"^B",674,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$n","~$s"]]]]]],"~$selections",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",244,"^A",7,"^B",244,"^C",17,"^J",["^K",["^L",["^K",[["^[","~$n"]]]]],"^10","All the ways of taking n (possibly the same) elements from the sequence of items"],"^6","~$clojure.math.combinatorics/selections","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",17,"^P",["^K",[["^[","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",244,"^T","^U","^B",244,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["^[","~$n"]]]]],"^10","All the ways of taking n (possibly the same) elements from the sequence of items"],"~$factorial",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",321,"^A",8,"^B",321,"^C",17,"^I",true,"^J",["^K",["^L",["^K",[["~$n"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/factorial","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",17,"^P",["^K",[["~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",321,"^T","^U","^B",321,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$n"]]]]]],"~$dec-key",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",406,"^A",8,"^B",406,"^C",15,"^I",true,"^J",["^K",["^L",["^K",[["~$m","~$k"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/dec-key","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",15,"^P",["^K",[["~$m","~$k"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",406,"^T",["^4",["^12","^U","^1P"]],"^B",406,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$m","~$k"]]]]]],"~$lex-permutations",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",268,"^A",8,"^B",268,"^C",24,"^I",true,"^J",["^K",["^L",["^K",[["~$c"]]]]],"^10","DEPRECATED as a public function.\n\nIn prior versions of the combinatorics library, there were two similar functions: permutations and lex-permutations.  It was a source of confusion to know which to call.  Now, you can always call permutations.  When appropriate (i.e., when you pass in a sorted sequence of numbers), permutations will automatically call lex-permutations as a speed optimization."],"^I",true,"^6","~$clojure.math.combinatorics/lex-permutations","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",24,"^P",["^K",[["~$c"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",268,"^T","^1L","^B",268,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$c"]]]]],"^10","DEPRECATED as a public function.\n\nIn prior versions of the combinatorics library, there were two similar functions: permutations and lex-permutations.  It was a source of confusion to know which to call.  Now, you can always call permutations.  When appropriate (i.e., when you pass in a sorted sequence of numbers), permutations will automatically call lex-permutations as a speed optimization."],"~$sorted-numbers?",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",279,"^A",8,"^B",279,"^C",23,"^I",true,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^10","Returns true iff s is a sequence of numbers in non-decreasing order"],"^I",true,"^6","~$clojure.math.combinatorics/sorted-numbers?","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",23,"^P",["^K",[["~$s"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",279,"^T",["^4",["^1;","^U"]],"^B",279,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^10","Returns true iff s is a sequence of numbers in non-decreasing order"],"~$index-combinations",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",108,"^A",8,"^B",108,"^C",26,"^I",true,"^J",["^K",["^L",["^K",[["~$n","~$cnt"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/index-combinations","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",26,"^P",["^K",[["~$n","^2["]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",108,"^T","^1L","^B",108,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$n","^2["]]]]]],"~$count-permutations",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",367,"^A",7,"^B",367,"^C",25,"^J",["^K",["^L",["^K",[["~$l"]]]]],"^10","Counts the number of distinct permutations of l"],"^6","~$clojure.math.combinatorics/count-permutations","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",25,"^P",["^K",[["~$l"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",367,"^T",["^4",[null,"^U"]],"^B",367,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$l"]]]]],"^10","Counts the number of distinct permutations of l"],"~$vec-lex-permutations",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",265,"^A",8,"^B",265,"^C",28,"^I",true,"^J",["^K",["^L",["^K",[["~$v"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/vec-lex-permutations","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",28,"^P",["^K",[["~$v"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",265,"^T",["^4",["^12","^1P"]],"^B",265,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$v"]]]]]],"~$list-index",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",610,"^A",8,"^B",610,"^C",18,"^I",true,"^J",["^K",["^L",["^K",[["~$l","~$item"]]]]],"^10","The opposite of nth, i.e., from an item in a list, find the n"],"^I",true,"^6","~$clojure.math.combinatorics/list-index","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",18,"^P",["^K",[["~$l","^36"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",610,"^T","^F","^B",610,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$l","^36"]]]]],"^10","The opposite of nth, i.e., from an item in a list, find the n"],"~$combinations",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",193,"^A",7,"^B",193,"^C",19,"^J",["^K",["^L",["^K",[["^[","~$t"]]]]],"^10","All the unique ways of taking t different elements from items"],"^6","~$clojure.math.combinatorics/combinations","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",19,"^P",["^K",[["^[","~$t"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",193,"^T",["^4",["^12","~$cljs.core/List","^1P"]],"^B",193,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["^[","~$t"]]]]],"^10","All the unique ways of taking t different elements from items"],"~$count-combinations-unmemoized",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",510,"^A",8,"^B",510,"^C",37,"^I",true,"^J",["^K",["^L",["^K",[["^[","~$t"]]]]],"^10","We need an internal version that doesn't memoize each call to count-combinations-from-frequencies\nso that we can memoize over a series of calls."],"^I",true,"^6","~$clojure.math.combinatorics/count-combinations-unmemoized","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",37,"^P",["^K",[["^[","~$t"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",510,"^T",["^4",[null,"^U","^F"]],"^B",510,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["^[","~$t"]]]]],"^10","We need an internal version that doesn't memoize each call to count-combinations-from-frequencies\nso that we can memoize over a series of calls."],"~$iter-perm",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",250,"^A",8,"^B",250,"^C",17,"^I",true,"^J",["^K",["^L",["^K",[["~$v"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/iter-perm","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",17,"^P",["^K",[["~$v"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",250,"^T",["^4",["^U","^1P"]],"^B",250,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$v"]]]]]],"^5",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",661,"^A",8,"^B",661,"^C",14,"^I",true,"^J",["^K",["^L",["^K",[["~$vec","~$index","~$f"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/update","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",14,"^P",["^K",[["^3?","^3@","~$f"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",661,"^T",["^4",["^12","^U"]],"^B",661,"^V",3,"^W",true,"^J",["^K",["^L",["^K",[["^3?","^3@","~$f"]]]]]],"~$*'",["^ ","^6","~$clojure.math.combinatorics/*'","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",84,"^A",10,"^B",84,"^C",17,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",84,"^A",15,"^B",84,"^C",17],"^E","^F"],"~$next-distribution",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",142,"^A",8,"^B",142,"^C",25,"^I",true,"^J",["^K",["^L",["^K",[["~$m","~$total","~$distribution"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/next-distribution","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",25,"^P",["^K",[["~$m","^3E","^3F"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",142,"^T",["^4",["^12","^1P"]],"^B",142,"^V",3,"^W",true,"^J",["^K",["^L",["^K",[["~$m","^3E","^3F"]]]]]],"~$index-remainder",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",390,"^A",8,"^B",390,"^C",23,"^I",true,"^J",["^K",["^L",["^K",[["~$perm-numbers","~$n"]]]]],"^10","Finds the index and remainder from the initial-perm-numbers."],"^I",true,"^6","~$clojure.math.combinatorics/index-remainder","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",23,"^P",["^K",[["^3I","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",390,"^T","^1>","^B",390,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["^3I","~$n"]]]]],"^10","Finds the index and remainder from the initial-perm-numbers."],"~$distribute",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",128,"^A",8,"^B",128,"^C",18,"^I",true,"^J",["^K",["^L",["^K",[["~$m","^3@","^3E","^3F","~$already-distributed"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/distribute","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",18,"^P",["^K",[["~$m","^3@","^3E","^3F","^3L"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",128,"^T",["^4",["^12","^1P"]],"^B",128,"^V",5,"^W",true,"^J",["^K",["^L",["^K",[["~$m","^3@","^3E","^3F","^3L"]]]]]],"~$count-combinations-from-frequencies",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",495,"^A",25,"^B",495,"^C",60,"~:dynamic",true,"^I",true,"^J",["^K",["^L",["^K",[["^1@","~$t"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/count-combinations-from-frequencies","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",60,"^P",["^K",[["^1@","~$t"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^3O",true,"^@",495,"^T",["^4",[null,"^U","^F"]],"^B",495,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["^1@","~$t"]]]]]],"~$multi-perm",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",285,"^A",8,"^B",285,"^C",18,"^I",true,"^J",["^K",["^L",["^K",[["~$l"]]]]],"^10","Handles the case when you want the permutations of a list with duplicate items."],"^I",true,"^6","~$clojure.math.combinatorics/multi-perm","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",18,"^P",["^K",[["~$l"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",285,"^T","^1L","^B",285,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$l"]]]]],"^10","Handles the case when you want the permutations of a list with duplicate items."],"~$nth-permutation-distinct",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",343,"^A",8,"^B",343,"^C",32,"^I",true,"^J",["^K",["^L",["^K",[["~$l","~$n"]]]]],"^10","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"^I",true,"^6","~$clojure.math.combinatorics/nth-permutation-distinct","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",32,"^P",["^K",[["~$l","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",343,"^T",["^4",["^12","^1>"]],"^B",343,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$l","~$n"]]]]],"^10","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"~$nth-subset",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",595,"^A",7,"^B",595,"^C",17,"^J",["^K",["^L",["^K",[["^[","~$n"]]]]]],"^6","~$clojure.math.combinatorics/nth-subset","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",17,"^P",["^K",[["^[","~$n"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",595,"^T",["^4",[null,"^12","^U"]],"^B",595,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["^[","~$n"]]]]]],"~$subsets",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",218,"^A",7,"^B",218,"^C",14,"^J",["^K",["^L",["^K",[["^["]]]]],"^10","All the subsets of items"],"^6","~$clojure.math.combinatorics/subsets","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",14,"^P",["^K",[["^["]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",218,"^T","^1L","^B",218,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^["]]]]],"^10","All the subsets of items"],"~$m6",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",893,"^A",8,"^B",893,"^C",10,"^I",true,"^J",["^K",["^L",["^K",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/m6","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",10,"^P",["^K",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",893,"^T",["^4",["^12","^1K","^U"]],"^B",893,"^V",11,"^W",true,"^J",["^K",["^L",["^K",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"~$multi-comb",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",180,"^A",8,"^B",180,"^C",18,"^I",true,"^J",["^K",["^L",["^K",[["~$l","~$t"]]]]],"^10","Handles the case when you want the combinations of a list with duplicate items."],"^I",true,"^6","~$clojure.math.combinatorics/multi-comb","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",18,"^P",["^K",[["~$l","~$t"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",180,"^T","^1L","^B",180,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$l","~$t"]]]]],"^10","Handles the case when you want the combinations of a list with duplicate items."],"~$multiset-partitions-M",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",794,"^A",8,"^B",794,"^C",29,"^I",true,"^J",["^K",["^L",["^K",[["~$multiset","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]],"^15",["^ ","^S",false,"^16",11,"^V",11,"^P",[["^42","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]],"^J",["^K",[["^42","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^R",["^K",[null,null]]]],"^I",true,"^6","~$clojure.math.combinatorics/multiset-partitions-M","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",29,"^15",["^ ","^S",false,"^16",11,"^V",11,"^P",[["^42","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]],"^J",["^K",[["^42","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^R",["^K",[null,null]]],"^P",[["^42","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]],"^Q",null,"^16",11,"^R",["^K",[null,null]],"^A",1,"^S",false,"^18",[["^ ","^16",3,"^S",false,"^E","^U"],["^ ","^16",11,"^S",false,"^E",["^4",["^12","^U"]]]],"^@",794,"^B",794,"^V",11,"^W",true,"^J",["^K",[["^42","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]],"~$bounded-distributions",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",169,"^A",8,"^B",169,"^C",29,"^I",true,"^J",["^K",["^L",["^K",[["~$m","~$t"]]]]]],"^I",true,"^6","~$clojure.math.combinatorics/bounded-distributions","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",29,"^P",["^K",[["~$m","~$t"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",169,"^T","^12","^B",169,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$m","~$t"]]]]]],"~$mapjoin",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",95,"^A",8,"^B",95,"^C",15,"^I",true,"^J",["^K",["^L",["^K",[["~$f","~$coll"]]]]],"^10","Uses join to achieve lazier version of mapcat (on one collection)"],"^I",true,"^6","~$clojure.math.combinatorics/mapjoin","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",15,"^P",["^K",[["~$f","^47"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",95,"^T","^1L","^B",95,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["~$f","^47"]]]]],"^10","Uses join to achieve lazier version of mapcat (on one collection)"],"~$permuted-combinations",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",309,"^A",7,"^B",309,"^C",28,"^J",["^K",["^L",["^K",[["^[","~$t"]]]]],"^10","Every permutation of every combination of t elements from items"],"^6","~$clojure.math.combinatorics/permuted-combinations","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",28,"^P",["^K",[["^[","~$t"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",309,"^T","^1L","^B",309,"^V",2,"^W",true,"^J",["^K",["^L",["^K",[["^[","~$t"]]]]],"^10","Every permutation of every combination of t elements from items"],"~$unchunk",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",206,"^A",8,"^B",206,"^C",15,"^I",true,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^10","Given a sequence that may have chunks, return a sequence that is 1-at-a-time\nlazy with no chunks. Chunks are good for efficiency when the data items are\nsmall, but when being processed via map, for example, a reference is kept to\nevery function result in the chunk until the entire chunk has been processed,\nwhich increases the amount of memory in use that cannot be garbage\ncollected."],"^I",true,"^6","~$clojure.math.combinatorics/unchunk","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",15,"^P",["^K",[["~$s"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",206,"^T","^1L","^B",206,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^10","Given a sequence that may have chunks, return a sequence that is 1-at-a-time\nlazy with no chunks. Chunks are good for efficiency when the data items are\nsmall, but when being processed via map, for example, a reference is kept to\nevery function result in the chunk until the entire chunk has been processed,\nwhich increases the amount of memory in use that cannot be garbage\ncollected."],"~$permutation-index",["^ ","^H",null,"^D",["^ ","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^@",636,"^A",7,"^B",636,"^C",24,"^J",["^K",["^L",["^K",[["^["]]]]],"^10","Input must be a sortable collection of items.  Returns the n such that\n    (nth-permutation (sort items) n) is items."],"^6","~$clojure.math.combinatorics/permutation-index","^?","/home/ulli/.cljs/.aot_cache/1.10.866/11B176B/clojure/math/combinatorics.cljc","^C",24,"^P",["^K",[["^["]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^S",false,"^@",636,"^T","^U","^B",636,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^["]]]]],"^10","Input must be a sortable collection of items.  Returns the n such that\n    (nth-permutation (sort items) n) is items."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^1F","~:else","^1H"]],"~:order",["^4C","^1F","^1H"]],"^10","Efficient, functional algorithms for generating lazy\nsequences for common combinatorial functions. (See the source code \nfor a longer description.)"]