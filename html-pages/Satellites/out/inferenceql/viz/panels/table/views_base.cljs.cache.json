["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$inferenceql.viz.panels.table.views-base","~:imports",null,"~:requires",["^ ","~$yarn-handsontable","~$handsontable$default","^:","^:","~$csk","~$camel-snake-kebab.core","^<","^<","~$reagent","~$reagent.core","^>","^>","~$medley.core","^?"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$filter-kv","^?"],"~:defs",["^ ","~$sort-state-applicable",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ulli/.gitlibs/libs/probcomp/inferenceql.viz/b9432be71a76e6fb8f4b77d93859278936734320/src/inferenceql/viz/panels/table/views_base.cljs","~:line",8,"~:column",8,"~:end-line",8,"~:end-column",29,"~:private",true,"~:arglists",["~#list",["~$quote",["^N",[["~$columns","~$sort-config"]]]]],"~:doc","Determines whether `sort-config` can be applied to the columns.\n\n  This simply checks column numbers referenced `sort-config` are applicable to the number for\n  `columns` present.\n\n  Args:\n    columns: A vector of column names.\n    sort-config: (js-object) A sort config returned by Handsontable.\n  Returns:\n    A boolean if `sort-config` is applicable."],"^L",true,"^5","~$inferenceql.viz.panels.table.views-base/sort-state-applicable","^G","/home/ulli/.gitlibs/libs/probcomp/inferenceql.viz/b9432be71a76e6fb8f4b77d93859278936734320/src/inferenceql/viz/panels/table/views_base.cljs","^K",29,"~:method-params",["^N",[["^P","^Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^I",1,"~:variadic?",false,"^H",8,"~:ret-tag","~$boolean","^J",8,"~:max-fixed-arity",2,"~:fn-var",true,"^M",["^N",["^O",["^N",[["^P","^Q"]]]]],"^R","Determines whether `sort-config` can be applied to the columns.\n\n  This simply checks column numbers referenced `sort-config` are applicable to the number for\n  `columns` present.\n\n  Args:\n    columns: A vector of column names.\n    sort-config: (js-object) A sort config returned by Handsontable.\n  Returns:\n    A boolean if `sort-config` is applicable."],"~$update-hot!",["^ ","^E",null,"^F",["^ ","^G","/home/ulli/.gitlibs/libs/probcomp/inferenceql.viz/b9432be71a76e6fb8f4b77d93859278936734320/src/inferenceql/viz/panels/table/views_base.cljs","^H",24,"^I",7,"^J",24,"^K",18,"^M",["^N",["^O",["^N",[["~$hot-instance","~$new-settings","~$current-selection"]]]]],"^R","A helper function for updating the settings in a handsontable."],"^5","~$inferenceql.viz.panels.table.views-base/update-hot!","^G","/home/ulli/.gitlibs/libs/probcomp/inferenceql.viz/b9432be71a76e6fb8f4b77d93859278936734320/src/inferenceql/viz/panels/table/views_base.cljs","^K",18,"^T",["^N",[["^11","^12","^13"]]],"^U",null,"^V",["^N",[null,null]],"^I",1,"^W",false,"^H",24,"^X",["^4",["~$any","~$clj-nil"]],"^J",24,"^Z",3,"^[",true,"^M",["^N",["^O",["^N",[["^11","^12","^13"]]]]],"^R","A helper function for updating the settings in a handsontable."],"~$handsontable-base",["^ ","^E",null,"^F",["^ ","^G","/home/ulli/.gitlibs/libs/probcomp/inferenceql.viz/b9432be71a76e6fb8f4b77d93859278936734320/src/inferenceql/viz/panels/table/views_base.cljs","^H",52,"^I",7,"^J",52,"^K",24,"^M",["^N",["^O",["^N",[["^11","~$hot-reset!","~$attributes","~$props"]]]]],"^R","Low-level reagent component that wraps Handsontable.\n  Not meant to be used directly as it requires an atom-like store for the instance of\n  Handontable used by each instance of the component.\n\n  Args:\n    hot-instance -- an atom-like object that when de-referenced gets the current instance of\n      Handsontable for this component.\n    hot-reset! -- a function that resets the value of `hot-instance` to the new value provided.\n    attributes -- dom node attributes for the table container.\n    props -- map with keys :settings and :hooks.\n      :settings -- settings for Handsontable, see Handsontable docs.\n      :hooks -- (optional) hooks for Handsontable, see Handsontable docs.\n      :selections-coords -- (optional) current selection in table to reapply after update."],"^5","~$inferenceql.viz.panels.table.views-base/handsontable-base","^G","/home/ulli/.gitlibs/libs/probcomp/inferenceql.viz/b9432be71a76e6fb8f4b77d93859278936734320/src/inferenceql/viz/panels/table/views_base.cljs","^K",24,"^T",["^N",[["^11","^18","^19","^1:"]]],"^U",null,"^V",["^N",[null,null]],"^I",1,"^W",false,"^H",52,"^X","~$function","^J",52,"^Z",4,"^[",true,"^M",["^N",["^O",["^N",[["^11","^18","^19","^1:"]]]]],"^R","Low-level reagent component that wraps Handsontable.\n  Not meant to be used directly as it requires an atom-like store for the instance of\n  Handontable used by each instance of the component.\n\n  Args:\n    hot-instance -- an atom-like object that when de-referenced gets the current instance of\n      Handsontable for this component.\n    hot-reset! -- a function that resets the value of `hot-instance` to the new value provided.\n    attributes -- dom node attributes for the table container.\n    props -- map with keys :settings and :hooks.\n      :settings -- settings for Handsontable, see Handsontable docs.\n      :hooks -- (optional) hooks for Handsontable, see Handsontable docs.\n      :selections-coords -- (optional) current selection in table to reapply after update."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^=","^>","^>","^>"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:selections-coords","~:ref","~:div#table-container","~:hooks","~:component-did-mount","~:settings","~:component-did-update","^I","~:div","~:reagent-render","~:component-will-unmount","~:display-name","~:table-div","~:keywordize-keys","~:colHeaders","~:data"]],"~:order",["^I","^1M","^1O","^1N","^1K","^1E","^1G","^1J","^1I","^1F","^1D","^1L","^1A","^1C","^1H","^1B"]],"^R","Base Reagent component for Handsontable."]