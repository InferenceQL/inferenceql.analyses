["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$read","~$read-string"]],"~:name","~$inferenceql.inference.gpm","~:imports",null,"~:requires",["^ ","~$inferenceql.inference.gpm.column","^;","~$view","~$inferenceql.inference.gpm.view","~$mmix","~$inferenceql.inference.gpm.multimixture","~$mmix.spec","~$inferenceql.inference.gpm.multimixture.specification","~$bernoulli","~$inferenceql.inference.gpm.primitive-gpms.bernoulli","~$xcat","~$inferenceql.inference.gpm.crosscat","~$inferenceql.inference.gpm.proto","^F","~$gaussian","~$inferenceql.inference.gpm.primitive-gpms.gaussian","^H","^H","~$column","^;","~$gpm-proto","^F","~$clojure.edn","^K","~$inferenceql.inference.gpm.primitive-gpms.categorical","^L","~$inferenceql.inference.gpm.compositional","^M","^A","^A","~$compositional","^M","~$edn","^K","^C","^C","~$categorical","^L","^E","^E","^?","^?","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$constrain",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","~:line",128,"~:column",7,"~:end-line",128,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^11",[["~$gpm","~$event","~$opts"]]]]],"~:doc","Constrains a GPM by an event. event is a tree-like data structure. opts is a\n  collection of functions for traversal of that tree-like data structure. Nodes\n  in that data structure are either operations (which can have child nodes),\n  variables, or values.\n\n  Required keys for opts include:\n    - :operation? must be a fn of one arg that returns true if its argument is\n      an operation node\n    - :operands must be a fn of one arg that returns the arguments to an\n      operation node\n    - :operator must be a fn of one arg that returns the operator for an\n      operation node\n    - :variable? must be a fn of one arg that returns true if its argument is a\n      variable"],"^7","~$inferenceql.inference.gpm/constrain","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",16,"~:method-params",["^11",[["^13","^14","^15"]]],"~:protocol-impl",null,"~:arglists-meta",["^11",[null,null]],"^Y",1,"~:variadic?",false,"^X",128,"~:ret-tag","~$any","^Z",128,"~:max-fixed-arity",3,"~:fn-var",true,"^10",["^11",["^12",["^11",[["^13","^14","^15"]]]]],"^16","Constrains a GPM by an event. event is a tree-like data structure. opts is a\n  collection of functions for traversal of that tree-like data structure. Nodes\n  in that data structure are either operations (which can have child nodes),\n  variables, or values.\n\n  Required keys for opts include:\n    - :operation? must be a fn of one arg that returns true if its argument is\n      an operation node\n    - :operands must be a fn of one arg that returns the arguments to an\n      operation node\n    - :operator must be a fn of one arg that returns the operator for an\n      operation node\n    - :variable? must be a fn of one arg that returns true if its argument is a\n      variable"],"~$as-gpm",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",155,"^Y",7,"^Z",155,"^[",13,"^10",["^11",["^12",["^11",[["~$x"]]]]],"^16","Coerce argument to a value that implements `gpm-proto.GPM`."],"^7","~$inferenceql.inference.gpm/as-gpm","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",13,"^18",["^11",[["~$x"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",155,"^1<",["^4",[null,"~$inferenceql.inference.gpm.multimixture/Multimixture"]],"^Z",155,"^1>",1,"^1?",true,"^10",["^11",["^12",["^11",[["~$x"]]]]],"^16","Coerce argument to a value that implements `gpm-proto.GPM`."],"~$logpdf",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",105,"^Y",7,"^Z",105,"^[",13,"^10",["^11",["^12",["^11",[["^13","~$targets","~$constraints"]]]]],"^16","Given a GPM, calculates the logpdf of `targets` given `constraints`."],"^7","~$inferenceql.inference.gpm/logpdf","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",13,"^18",["^11",[["^13","^1D","^1E"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",105,"^1<","^1=","^Z",105,"^1>",3,"^1?",true,"^10",["^11",["^12",["^11",[["^13","^1D","^1E"]]]]],"^16","Given a GPM, calculates the logpdf of `targets` given `constraints`."],"~$gpm?",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",89,"^Y",7,"^Z",89,"^[",11,"^10",["^11",["^12",["^11",[["~$x"]]]]],"^16","Returns `true` if `x` is a generative population model."],"^7","~$inferenceql.inference.gpm/gpm?","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",11,"^18",["^11",[["~$x"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",89,"^1<","~$boolean","^Z",89,"^1>",1,"^1?",true,"^10",["^11",["^12",["^11",[["~$x"]]]]],"^16","Returns `true` if `x` is a generative population model."],"~$View",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",51,"^Y",7,"^Z",51,"^[",11,"^10",["^11",["^12",["^11",[["~$columns","~$latents","~$assignments"]]]]],"^16","Returns a CrossCat View GPM.\n\n  It is the responsibility of the user to make sure that all categories\n  are of the correct type, and assignments are consistent in terms of assigning\n  a particular value to a given category.\n\n  columns: map of {column-symbol column}, where each column is a proper Column GPM.\n  latents: map of the below structure, used to keep track of row-category assignments,\n  as well as category sufficient statistics:\n\n  {:alpha  number                     The concentration parameter for the Column's CRP\n  :counts {category-name count}      Maps category name to size of the category. Updated\n  incrementally instead of being calculated on the fly.\n  :y {row-identifier category-name}  Maps rows to their current category assignment.\n\n  assignments: map of {value {:row-ids #{row-ids} category-symbol count}}, used for (un)incorporating\n  by value alone. The :row-ids key for each set of values is used for CrossCat inference\n  and the internal labeling of the data."],"^7","~$inferenceql.inference.gpm/View","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",11,"^18",["^11",[["^1K","^1L","^1M"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",51,"^1<","~$inferenceql.inference.gpm.view/View","^Z",51,"^1>",3,"^1?",true,"^10",["^11",["^12",["^11",[["^1K","^1L","^1M"]]]]],"^16","Returns a CrossCat View GPM.\n\n  It is the responsibility of the user to make sure that all categories\n  are of the correct type, and assignments are consistent in terms of assigning\n  a particular value to a given category.\n\n  columns: map of {column-symbol column}, where each column is a proper Column GPM.\n  latents: map of the below structure, used to keep track of row-category assignments,\n  as well as category sufficient statistics:\n\n  {:alpha  number                     The concentration parameter for the Column's CRP\n  :counts {category-name count}      Maps category name to size of the category. Updated\n  incrementally instead of being calculated on the fly.\n  :y {row-identifier category-name}  Maps rows to their current category assignment.\n\n  assignments: map of {value {:row-ids #{row-ids} category-symbol count}}, used for (un)incorporating\n  by value alone. The :row-ids key for each set of values is used for CrossCat inference\n  and the internal labeling of the data."],"~$insert",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",99,"^Y",7,"^Z",99,"^[",13,"^10",["^11",["^12",["^11",[["^13","~$values"]]]]],"^16","Given a non-parametric GPM and it's partition, insert a row into into the correct\n  category (aka the correct table/cluster)"],"^7","~$inferenceql.inference.gpm/insert","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",13,"^18",["^11",[["^13","^1Q"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",99,"^1<","^1=","^Z",99,"^1>",2,"^1?",true,"^10",["^11",["^12",["^11",[["^13","^1Q"]]]]],"^16","Given a non-parametric GPM and it's partition, insert a row into into the correct\n  category (aka the correct table/cluster)"],"~$dpmm",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",74,"^Y",7,"^Z",74,"^[",11,"^10",["^11",["^12",["^11",[[["^ ","~:keys",["~$model","^1L","~$types","~$data","~$options"]]],["^1U","^1L","^1V","^1W"],["^1U","^1L","^1V","^1W",["^ ","^1T",["^1X","~$crosscat"]]]]]]],"^16","Returns a CrossCat View GPM, given a View specification, latent assignments of rows\n  to categories, variable types, options (for categorical variables) and the corresponding data.","~:top-fn",["^ ","^1;",false,"~:fixed-arity",5,"^1>",5,"^18",[[["^ ","^1T",["^1U","^1L","^1V","^1W","^1X"]]],["^1U","^1L","^1V","^1W"],["^1U","^1L","^1V","^1W",["^ ","^1T",["^1X","^1Y"]]]],"^10",["^11",[[["^ ","^1T",["^1U","^1L","^1V","^1W","^1X"]]],["^1U","^1L","^1V","^1W"],["^1U","^1L","^1V","^1W",["^ ","^1T",["^1X","^1Y"]]]]],"^1:",["^11",[null,null,null]]]],"^7","~$inferenceql.inference.gpm/dpmm","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",11,"^1Z",["^ ","^1;",false,"^1[",5,"^1>",5,"^18",[[["^ ","^1T",["^1U","^1L","^1V","^1W","^1X"]]],["^1U","^1L","^1V","^1W"],["^1U","^1L","^1V","^1W",["^ ","^1T",["^1X","^1Y"]]]],"^10",["^11",[[["^ ","^1T",["^1U","^1L","^1V","^1W","^1X"]]],["^1U","^1L","^1V","^1W"],["^1U","^1L","^1V","^1W",["^ ","^1T",["^1X","^1Y"]]]]],"^1:",["^11",[null,null,null]]],"^18",[[["^ ","^1T",["^1U","^1L","^1V","^1W","^1X"]]],["^1U","^1L","^1V","^1W"],["^1U","^1L","^1V","^1W",["^ ","^1T",["^1X","^1Y"]]]],"^19",null,"^1[",5,"^1:",["^11",[null,null,null]],"^Y",1,"^1;",false,"~:methods",[["^ ","^1[",1,"^1;",false,"~:tag","^1="],["^ ","^1[",4,"^1;",false,"^22","^1="],["^ ","^1[",5,"^1;",false,"^22","^1O"]],"^X",74,"^Z",74,"^1>",5,"^1?",true,"^10",["^11",[[["^ ","^1T",["^1U","^1L","^1V","^1W","^1X"]]],["^1U","^1L","^1V","^1W"],["^1U","^1L","^1V","^1W",["^ ","^1T",["^1X","^1Y"]]]]],"^16","Returns a CrossCat View GPM, given a View specification, latent assignments of rows\n  to categories, variable types, options (for categorical variables) and the corresponding data."],"^5",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",165,"^Y",7,"^Z",165,"^[",11,"^10",["^11",["^12",["^11",[["~$stream"],["^15","^23"]]]]],"^16","Like `clojure.edn/read` but includes readers for records in\n  `inferneceql.inference`.","^1Z",["^ ","^1;",false,"^1[",2,"^1>",2,"^18",[["^23"],["^15","^23"]],"^10",["^11",[["^23"],["^15","^23"]]],"^1:",["^11",[null,null]]]],"^7","~$inferenceql.inference.gpm/read","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",11,"^1Z",["^ ","^1;",false,"^1[",2,"^1>",2,"^18",[["^23"],["^15","^23"]],"^10",["^11",[["^23"],["^15","^23"]]],"^1:",["^11",[null,null]]],"^18",[["^23"],["^15","^23"]],"^19",null,"^1[",2,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^21",[["^ ","^1[",1,"^1;",false,"^22","^1="],["^ ","^1[",2,"^1;",false,"^22",["^4",[null,"^1B"]]]],"^X",165,"^Z",165,"^1>",2,"^1?",true,"^10",["^11",[["^23"],["^15","^23"]]],"^16","Like `clojure.edn/read` but includes readers for records in\n  `inferneceql.inference`."],"~$incorporate",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",94,"^Y",7,"^Z",94,"^[",18,"^10",["^11",["^12",["^11",[["^13","^1Q"]]]]],"^16","Given a GPM, incorporates values into the GPM by updating its sufficient statistics."],"^7","~$inferenceql.inference.gpm/incorporate","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",18,"^18",["^11",[["^13","^1Q"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",94,"^1<","^1=","^Z",94,"^1>",2,"^1?",true,"^10",["^11",["^12",["^11",[["^13","^1Q"]]]]],"^16","Given a GPM, incorporates values into the GPM by updating its sufficient statistics."],"~$readers",["^ ","^7","~$inferenceql.inference.gpm/readers","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",146,"^Y",1,"^Z",146,"^[",13,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",146,"^Y",6,"^Z",146,"^[",13],"^22","~$cljs.core/IMap"],"~$variables",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",185,"^Y",7,"^Z",185,"^[",16,"^10",["^11",["^12",["^11",[["^13"]]]]],"^16","Given a GPM, returns the variables it supports."],"^7","~$inferenceql.inference.gpm/variables","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",16,"^18",["^11",[["^13"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",185,"^1<","^1=","^Z",185,"^1>",1,"^1?",true,"^10",["^11",["^12",["^11",[["^13"]]]]],"^16","Given a GPM, returns the variables it supports."],"~$mutual-information",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",110,"^Y",7,"^Z",110,"^[",25,"^10",["^11",["^12",["^11",[["^13","~$target-a","~$target-b","^1E","~$n-samples"]]]]],"^16","Given a GPM, estimates the mutual-information of `target-a` and `target-b`\n  given `constraints` with `n-samples`."],"^7","~$inferenceql.inference.gpm/mutual-information","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",25,"^18",["^11",[["^13","^2=","^2>","^1E","^2?"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",110,"^1<","^1=","^Z",110,"^1>",5,"^1?",true,"^10",["^11",["^12",["^11",[["^13","^2=","^2>","^1E","^2?"]]]]],"^16","Given a GPM, estimates the mutual-information of `target-a` and `target-b`\n  given `constraints` with `n-samples`."],"^6",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",27,"^1Z",["^ ","^1;",false,"^1[",2,"^1>",2,"^18",[["~$s"],["^15","~$s"]],"^10",["^11",[["~$s"],["^15","~$s"]]],"^1:",["^11",[null,null]]],"~:export",true,"^Y",16,"^X",175,"^Z",175,"^10",["^11",["^12",["^11",[["~$s"],["^15","~$s"]]]]],"^16","Like `clojure.edn/read-string` but includes readers for records from\n  `inferenceql.inference`."],"^7","~$inferenceql.inference.gpm/read-string","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",27,"^1Z",["^ ","^1;",false,"^1[",2,"^1>",2,"^18",[["~$s"],["^15","~$s"]],"^10",["^11",[["~$s"],["^15","~$s"]]],"^1:",["^11",[null,null]]],"^18",[["~$s"],["^15","~$s"]],"^19",null,"^1[",2,"^2A",true,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^21",[["^ ","^1[",1,"^1;",false,"^22","^1="],["^ ","^1[",2,"^1;",false,"^22",["^4",[null,"^1B"]]]],"^X",175,"^Z",175,"^1>",2,"^1?",true,"^10",["^11",[["~$s"],["^15","~$s"]]],"^16","Like `clojure.edn/read-string` but includes readers for records from\n  `inferenceql.inference`."],"~$simulate",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",116,"^Y",7,"^Z",116,"^[",15,"^10",["^11",["^12",["^11",[["^13","^1D","^1E"]]]]],"^16","Given a GPM, simulates a sample of the variables in `targets` given `constraints`."],"^7","~$inferenceql.inference.gpm/simulate","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",15,"^18",["^11",[["^13","^1D","^1E"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",116,"^1<","^1=","^Z",116,"^1>",3,"^1?",true,"^10",["^11",["^12",["^11",[["^13","^1D","^1E"]]]]],"^16","Given a GPM, simulates a sample of the variables in `targets` given `constraints`."],"~$condition",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",121,"^Y",7,"^Z",121,"^[",16,"^10",["^11",["^12",["^11",[["^13","~$conditions"]]]]],"^16","Conditions the provided generative probabilistic model such that it only\n  simulates the provided targets, and is always subject to the provided\n  conditions."],"^7","~$inferenceql.inference.gpm/condition","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",16,"^18",["^11",[["^13","^2F"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",121,"^1<","^1=","^Z",121,"^1>",2,"^1?",true,"^10",["^11",["^12",["^11",[["^13","^2F"]]]]],"^16","Conditions the provided generative probabilistic model such that it only\n  simulates the provided targets, and is always subject to the provided\n  conditions."],"~$Multimixture",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",84,"^Y",7,"^Z",84,"^[",19,"^10",["^11",["^12",["^11",[["^1U"]]]]],"^16","Wrapper to provide conversion to Multimixture model."],"^7","~$inferenceql.inference.gpm/Multimixture","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",19,"^18",["^11",[["^1U"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",84,"^1<","^1B","^Z",84,"^1>",1,"^1?",true,"^10",["^11",["^12",["^11",[["^1U"]]]]],"^16","Wrapper to provide conversion to Multimixture model."],"~$logprob",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",190,"^Y",7,"^Z",190,"^[",14,"^10",["^11",["^12",["^11",[["^13","^14"]]]]],"^16","Returns the log probability of of an event under a model."],"^7","~$inferenceql.inference.gpm/logprob","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",14,"^18",["^11",[["^13","^14"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",190,"^1<","^1=","^Z",190,"^1>",2,"^1?",true,"^10",["^11",["^12",["^11",[["^13","^14"]]]]],"^16","Returns the log probability of of an event under a model."],"~$Column",["^ ","^U",null,"^V",["^ ","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^X",29,"^Y",7,"^Z",29,"^[",13,"^10",["^11",["^12",["^11",[["~$var-name","~$stattype","~$categories","^1M","~$hyperparameters","~$hyper-grid","~$metadata"]]]]],"^16","Returns a CrossCat Column GPM.\n\n  It is the responsibility of the user to make sure that all categories\n  are of the correct type, and assignments are consistent in terms of assigning\n  a particular value to a given category.\n\n  var-name: the name of the variable contained in the column.\n  stattype: the statistical type of the variable contained in the column (e.g. :bernoulli).\n  categories: a map of {category-symbol category}, where each category must be a pGPM of\n              the Column's statistical type.\n  assignments: map of {value {category-symbol count}}, used for (un)incorporating by value alone.\n               Note that identical instances of values are unique only in that `assignments` keeps\n               track of to which categories they belong.\n  hyperparameters: the hyperparameters of column; these persist across all categories.\n  hyper-grid: a gridded approximation of the hyperparameter space, used in CrossCat inference;\n              this is only updated when values are added or removed to the Column.\n  metadata: additional information needed in the column; e.g. for a :categorical Column,\n            `metadata` would contain a list of possible values the variable could take."],"^7","~$inferenceql.inference.gpm/Column","^W","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm.cljc","^[",13,"^18",["^11",[["^2M","^2N","^2O","^1M","^2P","^2Q","^2R"]]],"^19",null,"^1:",["^11",[null,null]],"^Y",1,"^1;",false,"^X",29,"^1<","~$inferenceql.inference.gpm.column/Column","^Z",29,"^1>",7,"^1?",true,"^10",["^11",["^12",["^11",[["^2M","^2N","^2O","^1M","^2P","^2Q","^2R"]]]]],"^16","Returns a CrossCat Column GPM.\n\n  It is the responsibility of the user to make sure that all categories\n  are of the correct type, and assignments are consistent in terms of assigning\n  a particular value to a given category.\n\n  var-name: the name of the variable contained in the column.\n  stattype: the statistical type of the variable contained in the column (e.g. :bernoulli).\n  categories: a map of {category-symbol category}, where each category must be a pGPM of\n              the Column's statistical type.\n  assignments: map of {value {category-symbol count}}, used for (un)incorporating by value alone.\n               Note that identical instances of values are unique only in that `assignments` keeps\n               track of to which categories they belong.\n  hyperparameters: the hyperparameters of column; these persist across all categories.\n  hyper-grid: a gridded approximation of the hyperparameter space, used in CrossCat inference;\n              this is only updated when values are added or removed to the Column.\n  metadata: additional information needed in the column; e.g. for a :categorical Column,\n            `metadata` would contain a list of possible values the variable could take."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:latents","~:else","~$inferenceql.inference.gpm.view.View","~$inferenceql.inference.gpm.primitive_gpms.gaussian.Gaussian","~:value","~$inferenceql.inference.gpm.compositional.Compositional","~:readers","~$inferenceql.inference.gpm.primitive_gpms.categorical.Categorical","~$inferenceql.inference.gpm.primitive_gpms.bernoulli.Bernoulli","~:types","~$inferenceql.inference.gpm.crosscat.XCat","~:options","~:crosscat","~$inferenceql.inference.gpm.column.Column","~:data","~:model"]],"~:order",["^3<","^2Y","^36","^3;","^38","^39","^3:","^32","^37","^35","^34","^30","^2[","^2Z","^31","^33"]],"^16",null]