["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$inferenceql.inference.gpm.conditioned","~:imports",null,"~:requires",["^ ","~$gpm.proto","~$inferenceql.inference.gpm.proto","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$ConditionedGPM",["^ ","~:num-fields",2,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$inferenceql.inference.gpm.proto/Variables","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$inferenceql.inference.gpm.proto/GPM","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$inferenceql.inference.gpm.conditioned/ConditionedGPM","~:file","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/conditioned.cljc","~:end-column",26,"~:type",true,"~:column",12,"~:internal-ctor",true,"~:line",4,"~:record",true,"~:end-line",4,"~:tag","~$function","~:skip-protocol-flag",["^4",["^A","^B","^C","^D","^E","^F","^H","^I","^J","^L","^M","^N","^O","^P","^Q"]]],"~$->ConditionedGPM",["^ ","~:protocol-inline",null,"~:meta",["^ ","^S","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/conditioned.cljc","^T",26,"^V",12,"^W",true,"~:factory","~:positional","^X",4,"^Z",4,"~:arglists",["~#list",["~$quote",["^18",[["~$gpm","~$conditions"]]]]],"~:doc","Positional factory function for inferenceql.inference.gpm.conditioned/ConditionedGPM."],"^5","~$inferenceql.inference.gpm.conditioned/->ConditionedGPM","^S","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/conditioned.cljc","^T",26,"~:method-params",["^18",[["^1:","^1;"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^V",1,"^W",true,"~:variadic?",false,"^15","^16","^X",4,"~:ret-tag","^R","^Z",4,"~:max-fixed-arity",2,"~:fn-var",true,"^17",["^18",["^19",["^18",[["^1:","^1;"]]]]],"^1<","Positional factory function for inferenceql.inference.gpm.conditioned/ConditionedGPM."],"~$map->ConditionedGPM",["^ ","^13",null,"^14",["^ ","^S","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/conditioned.cljc","^T",26,"^V",12,"^W",true,"^15","~:map","^X",4,"^Z",4,"^17",["^18",["^19",["^18",[["~$G__3685"]]]]],"^1<","Factory function for inferenceql.inference.gpm.conditioned/ConditionedGPM, taking a map of keywords to field values."],"^5","~$inferenceql.inference.gpm.conditioned/map->ConditionedGPM","^S","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/conditioned.cljc","^T",26,"^1>",["^18",[["^1G"]]],"^1?",null,"^1@",["^18",[null,null]],"^V",1,"^W",true,"^1A",false,"^15","^1F","^X",4,"^1B","^R","^Z",4,"^1C",1,"^1D",true,"^17",["^18",["^19",["^18",[["^1G"]]]]],"^1<","Factory function for inferenceql.inference.gpm.conditioned/ConditionedGPM, taking a map of keywords to field values."],"~$condition",["^ ","^13",null,"^14",["^ ","^S","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/conditioned.cljc","^X",18,"^V",7,"^Z",18,"^T",16,"^17",["^18",["^19",["^18",[["^1:","^1;"]]]]],"^1<","Conditions gpm based on conditions via rejection sampling. Arguments are the\n  same as those for `inferenceql.inference.gom/condition`."],"^5","~$inferenceql.inference.gpm.conditioned/condition","^S","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/conditioned.cljc","^T",16,"^1>",["^18",[["^1:","^1;"]]],"^1?",null,"^1@",["^18",[null,null]],"^V",1,"^1A",false,"^X",18,"^1B","^R","^Z",18,"^1C",2,"^1D",true,"^17",["^18",["^19",["^18",[["^1:","^1;"]]]]],"^1<","Conditions gpm based on conditions via rejection sampling. Arguments are the\n  same as those for `inferenceql.inference.gom/condition`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:gpm","^1:","~:conditions","^1;"]],"~:order",["^1O","^1P","^1:","^1;"]],"^1<",null]