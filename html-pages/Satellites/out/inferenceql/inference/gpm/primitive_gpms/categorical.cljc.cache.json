["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$inferenceql.inference.gpm.primitive-gpms.categorical","~:imports",null,"~:requires",["^ ","~$gpm.proto","~$inferenceql.inference.gpm.proto","^:","^:","~$utils","~$inferenceql.inference.utils","^<","^<","~$primitives","~$inferenceql.inference.primitives","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$Categorical",["^ ","~:num-fields",3,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$inferenceql.inference.gpm.proto/Incorporate","~$cljs.core/ICounted","~$inferenceql.inference.gpm.proto/Variables","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$inferenceql.inference.gpm.proto/GPM","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup","~$inferenceql.inference.gpm.proto/Score"]],"^5","~$inferenceql.inference.gpm.primitive-gpms.categorical/Categorical","~:file","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","~:end-column",23,"~:type",true,"~:column",12,"~:internal-ctor",true,"~:line",6,"~:record",true,"~:end-line",6,"~:tag","~$function","~:skip-protocol-flag",["^4",["^E","^F","^G","^H","^I","^K","^M","^N","^O","^Q","^R","^S","^T","^U","^V"]]],"~$->Categorical",["^ ","~:protocol-inline",null,"~:meta",["^ ","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^Z",23,"^10",12,"^11",true,"~:factory","~:positional","^12",6,"^14",6,"~:arglists",["~#list",["~$quote",["^1>",[["~$var-name","~$suff-stats","~$hyperparameters"]]]]],"~:doc","Positional factory function for inferenceql.inference.gpm.primitive-gpms.categorical/Categorical."],"^5","~$inferenceql.inference.gpm.primitive-gpms.categorical/->Categorical","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^Z",23,"~:method-params",["^1>",[["^1@","^1A","^1B"]]],"~:protocol-impl",null,"~:arglists-meta",["^1>",[null,null]],"^10",1,"^11",true,"~:variadic?",false,"^1;","^1<","^12",6,"~:ret-tag","^X","^14",6,"~:max-fixed-arity",3,"~:fn-var",true,"^1=",["^1>",["^1?",["^1>",[["^1@","^1A","^1B"]]]]],"^1C","Positional factory function for inferenceql.inference.gpm.primitive-gpms.categorical/Categorical."],"~$map->Categorical",["^ ","^19",null,"^1:",["^ ","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^Z",23,"^10",12,"^11",true,"^1;","~:map","^12",6,"^14",6,"^1=",["^1>",["^1?",["^1>",[["~$G__3535"]]]]],"^1C","Factory function for inferenceql.inference.gpm.primitive-gpms.categorical/Categorical, taking a map of keywords to field values."],"^5","~$inferenceql.inference.gpm.primitive-gpms.categorical/map->Categorical","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^Z",23,"^1E",["^1>",[["^1N"]]],"^1F",null,"^1G",["^1>",[null,null]],"^10",1,"^11",true,"^1H",false,"^1;","^1M","^12",6,"^1I","^X","^14",6,"^1J",1,"^1K",true,"^1=",["^1>",["^1?",["^1>",[["^1N"]]]]],"^1C","Factory function for inferenceql.inference.gpm.primitive-gpms.categorical/Categorical, taking a map of keywords to field values."],"~$categorical?",["^ ","^19",null,"^1:",["^ ","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^12",65,"^10",7,"^14",65,"^Z",19,"^1=",["^1>",["^1?",["^1>",[["~$stattype"]]]]],"^1C","Checks if the given pGPM is Categorical."],"^5","~$inferenceql.inference.gpm.primitive-gpms.categorical/categorical?","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^Z",19,"^1E",["^1>",[["^1Q"]]],"^1F",null,"^1G",["^1>",[null,null]],"^10",1,"^1H",false,"^12",65,"^1I","~$boolean","^14",65,"^1J",1,"^1K",true,"^1=",["^1>",["^1?",["^1>",[["^1Q"]]]]],"^1C","Checks if the given pGPM is Categorical."],"~$hyper-grid",["^ ","^19",null,"^1:",["^ ","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^12",71,"^10",7,"^14",71,"^Z",17,"^1=",["^1>",["^1?",["^1>",[["~$data","~$n-grid"]]]]],"^1C","Hyperparameter grid for the Categorical variable, used in column hyperparameter inference\n  for Column GPMs."],"^5","~$inferenceql.inference.gpm.primitive-gpms.categorical/hyper-grid","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^Z",17,"^1E",["^1>",[["^1U","^1V"]]],"^1F",null,"^1G",["^1>",[null,null]],"^10",1,"^1H",false,"^12",71,"^1I","^U","^14",71,"^1J",2,"^1K",true,"^1=",["^1>",["^1?",["^1>",[["^1U","^1V"]]]]],"^1C","Hyperparameter grid for the Categorical variable, used in column hyperparameter inference\n  for Column GPMs."],"~$spec->categorical",["^ ","^19",null,"^1:",["^ ","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^12",78,"^10",7,"^14",78,"^Z",24,"^1=",["^1>",["^1?",["^1>",[["^1@","~$&",["^ ","~:keys",["^1B","^1A","~$options"]]]]]]],"^1C","Casts a CrossCat category spec to a Categorical pGPM.\n  Requires a variable name, optionally takes by key\n  sufficient statistics, options, and hyperparameters.","~:top-fn",["^ ","^1H",true,"~:fixed-arity",1,"^1J",1,"^1E",[["^1>",["^1@",["^ ","^1Y",["^1B","^1A","^1Z"]]]]],"^1=",["^1>",[["^1@","~$&",["^ ","^1Y",["^1B","^1A","^1Z"]]]]],"^1G",["^1>",[null]]]],"^5","~$inferenceql.inference.gpm.primitive-gpms.categorical/spec->categorical","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^Z",24,"^1[",["^ ","^1H",true,"^20",1,"^1J",1,"^1E",[["^1>",["^1@",["^ ","^1Y",["^1B","^1A","^1Z"]]]]],"^1=",["^1>",[["^1@","~$&",["^ ","^1Y",["^1B","^1A","^1Z"]]]]],"^1G",["^1>",[null]]],"^1E",[["^1>",["^1@",["^ ","^1Y",["^1B","^1A","^1Z"]]]]],"^1F",null,"^20",1,"^1G",["^1>",[null]],"^10",1,"^1H",true,"~:methods",[["^ ","^20",1,"^1H",true,"^15","^X"]],"^12",78,"^1I","~$any","^14",78,"^1J",1,"^1K",true,"^1=",["^1>",[["^1@","~$&",["^ ","^1Y",["^1B","^1A","^1Z"]]]]],"^1C","Casts a CrossCat category spec to a Categorical pGPM.\n  Requires a variable name, optionally takes by key\n  sufficient statistics, options, and hyperparameters."],"~$export",["^ ","^19",null,"^1:",["^ ","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^12",89,"^10",7,"^14",89,"^Z",13,"^1=",["^1>",["^1?",["^1>",[["~$categorical"]]]]],"^1C","Exports a Categorical pGPM to a Multimixture spec."],"^5","~$inferenceql.inference.gpm.primitive-gpms.categorical/export","^Y","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/primitive_gpms/categorical.cljc","^Z",13,"^1E",["^1>",[["^25"]]],"^1F",null,"^1G",["^1>",[null,null]],"^10",1,"^1H",false,"^12",89,"^1I","^U","^14",89,"^1J",1,"^1K",true,"^1=",["^1>",["^1?",["^1>",[["^25"]]]]],"^1C","Exports a Categorical pGPM to a Multimixture spec."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:counts","~:else","~:log-categorical","~:n","~:hyperparameters","^1B","~:suff-stats","~:alpha","~:var-name","~:options","~:p","^1A","^1@"]],"~:order",["^2A","^2<","^2;","^2@","~:p","^2=","^2?","^2>","~:n","^1@","^1A","^1B","^2B"]],"^1C",null]