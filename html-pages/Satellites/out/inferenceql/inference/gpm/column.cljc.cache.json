["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$inferenceql.inference.gpm.column","~:imports",null,"~:requires",["^ ","~$conditioned","~$inferenceql.inference.gpm.conditioned","~$gpm.proto","~$inferenceql.inference.gpm.proto","~$inferenceql.inference.gpm.primitive-gpms","^=","~$inferenceql.inference.primitives","^>","~$inferenceql.inference.gpm.constrained","^?","^:","^:","^<","^<","~$constrained","^?","~$primitives","^>","~$utils","~$inferenceql.inference.utils","^C","^C","~$pgpms","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$crosscat-unincorporate",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","~:line",119,"~:column",7,"~:end-line",119,"~:end-column",29,"~:arglists",["~#list",["~$quote",["^Q",[["~$column","~$category-key","~$row-id"]]]]],"~:doc","Unincorporate method for CrossCat inference machinery.\n  Unincorporates the data associated with `row-id` from the category\n  specified by `category-key`."],"^5","~$inferenceql.inference.gpm.column/crosscat-unincorporate","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",29,"~:method-params",["^Q",[["^S","^T","^U"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^M",1,"~:variadic?",false,"^L",119,"~:ret-tag",["^4",[null,"~$clj","~$any"]],"^N",119,"~:max-fixed-arity",3,"~:fn-var",true,"^P",["^Q",["^R",["^Q",[["^S","^T","^U"]]]]],"^V","Unincorporate method for CrossCat inference machinery.\n  Unincorporates the data associated with `row-id` from the category\n  specified by `category-key`."],"~$update-hyper-grid",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",94,"^M",7,"^N",94,"^O",24,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^V","doc-string"],"^5","~$inferenceql.inference.gpm.column/update-hyper-grid","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",24,"^X",["^Q",[["^S"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^L",94,"^10",["^4",["^11","^12"]],"^N",94,"^13",1,"^14",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^V","doc-string"],"~$construct-column-from-latents",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",264,"^M",7,"^N",264,"^O",36,"^P",["^Q",["^R",["^Q",[["~$var-name","~$stattype","~$hyperparameters","~$latents","~$data"],["^18","^19","^1:","^1;","^1<",["^ ","~:keys",["~$options","~$crosscat"]]]]]]],"^V","Constructor for a Column GPM, given data for the column and latent\n  assignments of data to their respective categories. Used in CrossCat inference.\n\n  var-name: the name of the variable contained in the column.\n  stattype: the statistical type of the variable contained in the column (e.g. :bernoulli).\n  hyperparameters: the hyperparameters of column; these persist across all categories.\n  latents: a map of the below structure, used to keep track of row-category assignments,\n           as well as category sufficient statistics:\n             {:alpha  number                     The concentration parameter for the Column's CRP\n              :counts {category-name count}      Maps category name to size of the category. Updated\n                                                 incrementally instead of being calculated on the fly.\n              :y {row-identifier category-name}  Maps rows to their current category assignment.\n  data: the data belonging to the Column. Must either be a map of {row-id datum} or a vector\n        of data (that includes nil values).\n  options (optional): Information needed in the column; e.g. For a :categorical Column,\n                      `options` would contain a list of possible values the variable could take.\n  crosscat (optional): Flag to indicate use in a CrossCat model. This affects how data is handled\n                       internally, as CrossCat inference relies on unique row identifiers for\n                       efficient inference.","~:top-fn",["^ ","^[",false,"~:fixed-arity",6,"^13",6,"^X",[["^18","^19","^1:","^1;","^1<"],["^18","^19","^1:","^1;","^1<",["^ ","^1=",["^1>","^1?"]]]],"^P",["^Q",[["^18","^19","^1:","^1;","^1<"],["^18","^19","^1:","^1;","^1<",["^ ","^1=",["^1>","^1?"]]]]],"^Z",["^Q",[null,null]]]],"^5","~$inferenceql.inference.gpm.column/construct-column-from-latents","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",36,"^1@",["^ ","^[",false,"^1A",6,"^13",6,"^X",[["^18","^19","^1:","^1;","^1<"],["^18","^19","^1:","^1;","^1<",["^ ","^1=",["^1>","^1?"]]]],"^P",["^Q",[["^18","^19","^1:","^1;","^1<"],["^18","^19","^1:","^1;","^1<",["^ ","^1=",["^1>","^1?"]]]]],"^Z",["^Q",[null,null]]],"^X",[["^18","^19","^1:","^1;","^1<"],["^18","^19","^1:","^1;","^1<",["^ ","^1=",["^1>","^1?"]]]],"^Y",null,"^1A",6,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"~:methods",[["^ ","^1A",5,"^[",false,"~:tag","^12"],["^ ","^1A",6,"^[",false,"^1D",["^4",["^11","^12","~$inferenceql.inference.gpm.column/Column"]]]],"^L",264,"^N",264,"^13",6,"^14",true,"^P",["^Q",[["^18","^19","^1:","^1;","^1<"],["^18","^19","^1:","^1;","^1<",["^ ","^1=",["^1>","^1?"]]]]],"^V","Constructor for a Column GPM, given data for the column and latent\n  assignments of data to their respective categories. Used in CrossCat inference.\n\n  var-name: the name of the variable contained in the column.\n  stattype: the statistical type of the variable contained in the column (e.g. :bernoulli).\n  hyperparameters: the hyperparameters of column; these persist across all categories.\n  latents: a map of the below structure, used to keep track of row-category assignments,\n           as well as category sufficient statistics:\n             {:alpha  number                     The concentration parameter for the Column's CRP\n              :counts {category-name count}      Maps category name to size of the category. Updated\n                                                 incrementally instead of being calculated on the fly.\n              :y {row-identifier category-name}  Maps rows to their current category assignment.\n  data: the data belonging to the Column. Must either be a map of {row-id datum} or a vector\n        of data (that includes nil values).\n  options (optional): Information needed in the column; e.g. For a :categorical Column,\n                      `options` would contain a list of possible values the variable could take.\n  crosscat (optional): Flag to indicate use in a CrossCat model. This affects how data is handled\n                       internally, as CrossCat inference relies on unique row identifiers for\n                       efficient inference."],"~$crosscat-incorporate",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",102,"^M",7,"^N",102,"^O",27,"^P",["^Q",["^R",["^Q",[["^S","~$values","^T","^U"]]]]],"^V","Incorporate method for CrossCat inference machinery.\n  Incorporates `values` with a given `row-id` into the category\n  specified by `category-key`."],"^5","~$inferenceql.inference.gpm.column/crosscat-incorporate","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",27,"^X",["^Q",[["^S","^1G","^T","^U"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^L",102,"^10",["^4",[null,"^11","^12"]],"^N",102,"^13",4,"^14",true,"^P",["^Q",["^R",["^Q",[["^S","^1G","^T","^U"]]]]],"^V","Incorporate method for CrossCat inference machinery.\n  Incorporates `values` with a given `row-id` into the category\n  specified by `category-key`."],"~$crosscat-logpdf-score",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",152,"^M",7,"^N",152,"^O",28,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^V","Logpdf score used in CrossCat inference. This allows easy scoring of custom proposals\n  to column hyperparameters across all categories."],"^5","~$inferenceql.inference.gpm.column/crosscat-logpdf-score","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",28,"^X",["^Q",[["^S"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^L",152,"^10","^12","^N",152,"^13",1,"^14",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^V","Logpdf score used in CrossCat inference. This allows easy scoring of custom proposals\n  to column hyperparameters across all categories."],"~$update-column",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",37,"^M",7,"^N",37,"^O",20,"^P",["^Q",["^R",["^Q",[["^S","^1;"]]]]],"^V","Updates a column's categories based on a new view's latent assignments.\n  Used in incorporate-column."],"^5","~$inferenceql.inference.gpm.column/update-column","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",20,"^X",["^Q",[["^S","^1;"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^L",37,"^10",["^4",["^11","^12"]],"^N",37,"^13",2,"^14",true,"^P",["^Q",["^R",["^Q",[["^S","^1;"]]]]],"^V","Updates a column's categories based on a new view's latent assignments.\n  Used in incorporate-column."],"~$->Column",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",18,"^M",12,"~:internal-ctor",true,"~:factory","~:positional","^L",166,"^N",166,"^P",["^Q",["^R",["^Q",[["^18","^19","~$categories","~$assignments","^1:","~$hyper-grid","~$metadata"]]]]],"^V","Positional factory function for inferenceql.inference.gpm.column/Column."],"^5","~$inferenceql.inference.gpm.column/->Column","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",18,"^X",["^Q",[["^18","^19","^1Q","^1R","^1:","^1S","^1T"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^1N",true,"^[",false,"^1O","^1P","^L",166,"^10","^1E","^N",166,"^13",7,"^14",true,"^P",["^Q",["^R",["^Q",[["^18","^19","^1Q","^1R","^1:","^1S","^1T"]]]]],"^V","Positional factory function for inferenceql.inference.gpm.column/Column."],"~$generate-category",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",22,"^M",7,"^N",22,"^O",24,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^V","Given a column, generates a category from the column's hyperparameters."],"^5","~$inferenceql.inference.gpm.column/generate-category","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",24,"^X",["^Q",[["^S"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^L",22,"^10","^12","^N",22,"^13",1,"^14",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^V","Given a column, generates a category from the column's hyperparameters."],"~$category-logpdfs",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",68,"^M",7,"^N",68,"^O",23,"^P",["^Q",["^R",["^Q",[["^S","~$target"],["^S","^1Y",["^ ","^1=",["~$add-aux"]]]]]]],"^V","Calculates the logpdf of the target in each of the Column categories.","^1@",["^ ","^[",false,"^1A",3,"^13",3,"^X",[["^S","^1Y"],["^S","^1Y",["^ ","^1=",["^1Z"]]]],"^P",["^Q",[["^S","^1Y"],["^S","^1Y",["^ ","^1=",["^1Z"]]]]],"^Z",["^Q",[null,null]]]],"^5","~$inferenceql.inference.gpm.column/category-logpdfs","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",23,"^1@",["^ ","^[",false,"^1A",3,"^13",3,"^X",[["^S","^1Y"],["^S","^1Y",["^ ","^1=",["^1Z"]]]],"^P",["^Q",[["^S","^1Y"],["^S","^1Y",["^ ","^1=",["^1Z"]]]]],"^Z",["^Q",[null,null]]],"^X",[["^S","^1Y"],["^S","^1Y",["^ ","^1=",["^1Z"]]]],"^Y",null,"^1A",3,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^1C",[["^ ","^1A",2,"^[",false,"^1D","^12"],["^ ","^1A",3,"^[",false,"^1D",["^4",[null,"^12"]]]],"^L",68,"^N",68,"^13",3,"^14",true,"^P",["^Q",[["^S","^1Y"],["^S","^1Y",["^ ","^1=",["^1Z"]]]]],"^V","Calculates the logpdf of the target in each of the Column categories."],"~$map->Column",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",18,"^M",12,"^1N",true,"^1O","~:map","^L",166,"^N",166,"^P",["^Q",["^R",["^Q",[["~$G__3727"]]]]],"^V","Factory function for inferenceql.inference.gpm.column/Column, taking a map of keywords to field values."],"^5","~$inferenceql.inference.gpm.column/map->Column","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",18,"^X",["^Q",[["^22"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^1N",true,"^[",false,"^1O","^21","^L",166,"^10","^1E","^N",166,"^13",1,"^14",true,"^P",["^Q",["^R",["^Q",[["^22"]]]]],"^V","Factory function for inferenceql.inference.gpm.column/Column, taking a map of keywords to field values."],"~$column?",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",332,"^M",7,"^N",332,"^O",14,"^P",["^Q",["^R",["^Q",[["^19"]]]]],"^V","Checks if the given GPM is a Column."],"^5","~$inferenceql.inference.gpm.column/column?","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",14,"^X",["^Q",[["^19"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^L",332,"^10","~$boolean","^N",332,"^13",1,"^14",true,"^P",["^Q",["^R",["^Q",[["^19"]]]]],"^V","Checks if the given GPM is a Column."],"~$update-hypers",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",83,"^M",7,"^N",83,"^O",20,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^V","Update the hyperparameters across all categories in a Column GPM."],"^5","~$inferenceql.inference.gpm.column/update-hypers","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",20,"^X",["^Q",[["^S"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^L",83,"^10",["^4",["^11","^12"]],"^N",83,"^13",1,"^14",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^V","Update the hyperparameters across all categories in a Column GPM."],"~$add-category",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",31,"^M",7,"^N",31,"^O",19,"^P",["^Q",["^R",["^Q",[["^S","~$symb"]]]]],"^V","Adds a category under the given symbol name to the specified column."],"^5","~$inferenceql.inference.gpm.column/add-category","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",19,"^X",["^Q",[["^S","^2:"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^L",31,"^10",["^4",["^11","^12"]],"^N",31,"^13",2,"^14",true,"^P",["^Q",["^R",["^Q",[["^S","^2:"]]]]],"^V","Adds a category under the given symbol name to the specified column."],"~$crp-weights",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",12,"^M",7,"^N",12,"^O",18,"^P",["^Q",["^R",["^Q",[["^S","~$alpha"]]]]],"^V","Given a column and alpha, returns the CRP prior over categories."],"^5","~$inferenceql.inference.gpm.column/crp-weights","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",18,"^X",["^Q",[["^S","^2="]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^L",12,"^10",["^4",[null,"^12","~$cljs.core/LazySeq"]],"^N",12,"^13",2,"^14",true,"^P",["^Q",["^R",["^Q",[["^S","^2="]]]]],"^V","Given a column and alpha, returns the CRP prior over categories."],"~$crosscat-simulate",["^ ","^I",null,"^J",["^ ","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^L",146,"^M",7,"^N",146,"^O",24,"^P",["^Q",["^R",["^Q",[["^S","^T"]]]]],"^V","Given a Column and a category key, simulates a value from that category."],"^5","~$inferenceql.inference.gpm.column/crosscat-simulate","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",24,"^X",["^Q",[["^S","^T"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^[",false,"^L",146,"^10","^12","^N",146,"^13",2,"^14",true,"^P",["^Q",["^R",["^Q",[["^S","^T"]]]]],"^V","Given a Column and a category key, simulates a value from that category."],"~$Column",["^ ","~:num-fields",7,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$inferenceql.inference.gpm.proto/Incorporate","~$cljs.core/ICounted","~$inferenceql.inference.gpm.proto/Constrain","~$inferenceql.inference.gpm.proto/Variables","~$inferenceql.inference.gpm.proto/Condition","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$inferenceql.inference.gpm.proto/GPM","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup","~$inferenceql.inference.gpm.proto/Score"]],"^5","^1E","^K","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/column.cljc","^O",18,"~:type",true,"^M",12,"^1N",true,"^L",166,"~:record",true,"^N",166,"^1D","~$function","~:skip-protocol-flag",["^4",["^2E","^2F","^2G","^2H","^2I","^2K","^2O","^2P","^2Q","^2S","^2T","^2U","^2V","^2W","^2X"]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:y","~:aux","~:add-aux","^19","~:assignments","^1T","~:counts","~:else","~:log-categorical","^1R","~:n","~:hyperparameters","~:weights","^1:","~:categories","~:hyper-grid","~:categorical","~:suff-stats","~:logps","~:alpha","~:var-name","~:options","^1Q","~:stattype","~:crosscat","^1S","~:p","~:metadata","^18","~:data"]],"~:order",["~:n","^3A","^3>","^36","^3H","^3F","^3D","^3<","^3E","~:y","^3I","^38","^37","^3?","^3:","^3=","^3B","^3C","^3;","~:p","^18","^19","^1Q","^1R","^1:","^1S","^1T","^3G","^39","^3@"]],"^V","Implementation of a GPM that represents a population of data of the\n  same primitive type. For a tabular dataset, this GPM abstracts a Column\n  of that dataset. See `inferenceql.inference.gpm/column` for details."]