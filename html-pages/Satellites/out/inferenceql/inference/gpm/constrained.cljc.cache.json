["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$eval"]],"~:name","~$inferenceql.inference.gpm.constrained","~:imports",null,"~:requires",["^ ","~$gpm.proto","~$inferenceql.inference.gpm.proto","^;","^;","~$rfs","~$net.cgrand.xforms.rfs","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$constrain",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","~:line",76,"~:column",7,"~:end-line",76,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^J",[["~$gpm","~$event","~$opts"]]]]],"~:doc","Constrains gpm based on event via rejection sampling. Arguments are the same\n  as those for `inferenceql.inference.gpm/constrain`."],"^6","~$inferenceql.inference.gpm.constrained/constrain","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",16,"~:method-params",["^J",[["^L","^M","^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^F",1,"~:variadic?",false,"^E",76,"~:ret-tag","~$inferenceql.inference.gpm.constrained/ConstrainedGPM","^G",76,"~:max-fixed-arity",3,"~:fn-var",true,"^I",["^J",["^K",["^J",[["^L","^M","^N"]]]]],"^O","Constrains gpm based on event via rejection sampling. Arguments are the same\n  as those for `inferenceql.inference.gpm/constrain`."],"~$event->pred",["^ ","^B",null,"^C",["^ ","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^E",29,"^F",17,"^G",29,"^H",28,"~:private",true,"^I",["^J",["^K",["^J",[["^M",["^ ","~:keys",["~$operation?","~$variable?","~$operands","~$operator"]]]]]]],"^O","Returns a predicate for an event. The predicate when called on a sample will\n  return true if the event has occurred for that sample and false otherwise."],"^Z",true,"^6","~$inferenceql.inference.gpm.constrained/event->pred","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",28,"^Q",["^J",[["^M","~$p__3646"]]],"^R",null,"^S",["^J",[null,null]],"^F",1,"^T",false,"^E",29,"^U","~$function","^G",29,"^W",2,"^X",true,"^I",["^J",["^K",["^J",[["^M",["^ ","^[",["^10","^11","^12","^13"]]]]]]],"^O","Returns a predicate for an event. The predicate when called on a sample will\n  return true if the event has occurred for that sample and false otherwise."],"~$map->ConstrainedGPM",["^ ","^B",null,"^C",["^ ","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",26,"^F",12,"~:internal-ctor",true,"~:factory","~:map","^E",56,"^G",56,"^I",["^J",["^K",["^J",[["~$G__3655"]]]]],"^O","Factory function for inferenceql.inference.gpm.constrained/ConstrainedGPM, taking a map of keywords to field values."],"^6","~$inferenceql.inference.gpm.constrained/map->ConstrainedGPM","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",26,"^Q",["^J",[["^1;"]]],"^R",null,"^S",["^J",[null,null]],"^F",1,"^18",true,"^T",false,"^19","^1:","^E",56,"^U","^V","^G",56,"^W",1,"^X",true,"^I",["^J",["^K",["^J",[["^1;"]]]]],"^O","Factory function for inferenceql.inference.gpm.constrained/ConstrainedGPM, taking a map of keywords to field values."],"~$and-f",["^ ","^B",null,"^C",["^ ","^Z",true,"^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",22,"~:top-fn",["^ ","^T",true,"~:fixed-arity",0,"^W",0,"^Q",[["^J",["~$xs"]]],"^I",["^J",[["~$&","^1@"]]],"^S",["^J",[null]]],"^F",17,"^E",6,"^G",6,"^I",["^J",["^K",["^J",[["~$&","^1@"]]]]],"^O","Like `clojure.core/and`, but is a function and thus evaluates its arguments\n  eagerly."],"^Z",true,"^6","~$inferenceql.inference.gpm.constrained/and-f","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",22,"^1>",["^ ","^T",true,"^1?",0,"^W",0,"^Q",[["^J",["^1@"]]],"^I",["^J",[["~$&","^1@"]]],"^S",["^J",[null]]],"^Q",[["^J",["^1@"]]],"^R",null,"^1?",0,"^S",["^J",[null]],"^F",1,"^T",true,"~:methods",[["^ ","^1?",0,"^T",true,"~:tag","~$boolean"]],"^E",6,"^U","~$any","^G",6,"^W",0,"^X",true,"^I",["^J",[["~$&","^1@"]]],"^O","Like `clojure.core/and`, but is a function and thus evaluates its arguments\n  eagerly."],"~$or-f",["^ ","^B",null,"^C",["^ ","^Z",true,"^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",21,"^1>",["^ ","^T",true,"^1?",0,"^W",0,"^Q",[["^J",["^1@"]]],"^I",["^J",[["~$&","^1@"]]],"^S",["^J",[null]]],"^F",17,"^E",12,"^G",12,"^I",["^J",["^K",["^J",[["~$&","^1@"]]]]],"^O","Like `clojure.core/or`, but is a function and thus evaluates its arguments\n  eagerly."],"^Z",true,"^6","~$inferenceql.inference.gpm.constrained/or-f","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",21,"^1>",["^ ","^T",true,"^1?",0,"^W",0,"^Q",[["^J",["^1@"]]],"^I",["^J",[["~$&","^1@"]]],"^S",["^J",[null]]],"^Q",[["^J",["^1@"]]],"^R",null,"^1?",0,"^S",["^J",[null]],"^F",1,"^T",true,"^1B",[["^ ","^1?",0,"^T",true,"^1C","^1D"]],"^E",12,"^U","^1E","^G",12,"^W",0,"^X",true,"^I",["^J",[["~$&","^1@"]]],"^O","Like `clojure.core/or`, but is a function and thus evaluates its arguments\n  eagerly."],"~$ConstrainedGPM",["^ ","~:num-fields",4,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$inferenceql.inference.gpm.proto/Variables","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$inferenceql.inference.gpm.proto/GPM","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^6","^V","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",26,"~:type",true,"^F",12,"^18",true,"^E",56,"~:record",true,"^G",56,"^1C","^16","~:skip-protocol-flag",["^4",["^1K","^1L","^1M","^1N","^1O","^1P","^1R","^1S","^1T","^1V","^1W","^1X","^1Y","^1Z","^1["]]],"~$->ConstrainedGPM",["^ ","^B",null,"^C",["^ ","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",26,"^F",12,"^18",true,"^19","~:positional","^E",56,"^G",56,"^I",["^J",["^K",["^J",[["^L","~$pred?","~$variables","~$sample-size"]]]]],"^O","Positional factory function for inferenceql.inference.gpm.constrained/ConstrainedGPM."],"^6","~$inferenceql.inference.gpm.constrained/->ConstrainedGPM","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",26,"^Q",["^J",[["^L","^25","^26","^27"]]],"^R",null,"^S",["^J",[null,null]],"^F",1,"^18",true,"^T",false,"^19","^24","^E",56,"^U","^V","^G",56,"^W",4,"^X",true,"^I",["^J",["^K",["^J",[["^L","^25","^26","^27"]]]]],"^O","Positional factory function for inferenceql.inference.gpm.constrained/ConstrainedGPM."],"~$operator-env",["^ ","^C",["^ ","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^E",18,"^F",16,"^G",18,"^H",28,"^Z",true],"^Z",true,"^6","~$inferenceql.inference.gpm.constrained/operator-env","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",28,"^F",1,"^E",18,"^G",18,"^1C","^1Z","^O","A map from operator symbols to operator functions."],"~$event->variables",["^ ","^B",null,"^C",["^ ","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^E",49,"^F",17,"^G",49,"^H",33,"^Z",true,"^I",["^J",["^K",["^J",[["^M",["^ ","^[",["^10","^11","^12"]]]]]]],"^O","Returns all the variables in an event."],"^Z",true,"^6","~$inferenceql.inference.gpm.constrained/event->variables","^D","/home/ulli/.gitlibs/libs/probcomp/inferenceql.inference/fd40816ceb283880db2b87b3ce5a52dcce7263ad/src/inferenceql/inference/gpm/constrained.cljc","^H",33,"^Q",["^J",[["^M","~$p__3648"]]],"^R",null,"^S",["^J",[null,null]],"^F",1,"^T",false,"^E",49,"^U",["^4",["~$clj","^1E"]],"^G",49,"^W",2,"^X",true,"^I",["^J",["^K",["^J",[["^M",["^ ","^[",["^10","^11","^12"]]]]]]],"^O","Returns all the variables in an event."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^<","^=","^=","^="],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$=","~$<","~:else","~:symbol","~$<=","~:operation?","~:gpm","~:sample-size","~$>","~:env","~:variables","~:operands","~:pred?","~$or","~:variable?","^L","^27","~$not","^26","~$>=","^25","~:operator","~$and"]],"~:order",["~$<","^2E","~$=","~$>","^2P","^2R","^2M","^2O","^2F","^2N","^2K","^2Q","^2D","^2I","^2C","^2G","^2L","^2J","^2H","^L","^25","^26","^27"]],"^O",null]