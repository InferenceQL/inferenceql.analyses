["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$console","~$re-frame.loggers"],"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^=","~$data","~$clojure.data","~$re-frame.trace","^@","~$re-frame.settings","^A","~$interceptor","^=","~$trace","^@","~$re-frame.utils","^D","~$settings","^A","^4","^4","~$utils","^D","^<","^<","^?","^?","~$re-frame.db","^G"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4","~$assoc-coeffect","^=","~$app-db","^G","~$update-coeffect","^=","~$get-effect","^=","~$->interceptor","^=","~$get-coeffect","^=","~$assoc-effect","^="],"~:defs",["^ ","~$on-changes",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","~:line",206,"~:column",8,"~:end-line",206,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^[",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^[",["~$f","^11","^12"]]],"^Z",["^[",[["~$f","^11","~$&","^12"]]],"~:arglists-meta",["^[",[null]]]],"^7","~$re-frame.std-interceptors/on-changes","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^Y",18,"^13",["^ ","^14",true,"^15",2,"^16",2,"^17",[["^[",["~$f","^11","^12"]]],"^Z",["^[",[["~$f","^11","~$&","^12"]]],"^18",["^[",[null]]],"^17",[["^[",["~$f","^11","^12"]]],"~:protocol-impl",null,"^15",2,"^18",["^[",[null]],"^W",1,"^14",true,"~:methods",[["^ ","^15",2,"^14",true,"~:tag","~$cljs.core/IMap"]],"^V",206,"~:ret-tag","~$any","^X",206,"^16",2,"~:fn-var",true,"^Z",["^[",[["~$f","^11","~$&","^12"]]]],"~$enrich",["^ ","^S",null,"^T",["^ ","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",178,"^W",7,"^X",178,"^Y",13,"^Z",["^[",["^10",["^[",[["~$f"]]]]]],"^7","~$re-frame.std-interceptors/enrich","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^Y",13,"^17",["^[",[["~$f"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^14",false,"^V",178,"^1>","^1=","^X",178,"^16",1,"^1@",true,"^Z",["^[",["^10",["^[",[["~$f"]]]]]],"~$path",["^ ","^S",null,"^T",["^ ","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",149,"^W",7,"^X",149,"^Y",11,"^Z",["^[",["^10",["^[",[["~$&","~$args"]]]]],"^13",["^ ","^14",true,"^15",0,"^16",0,"^17",[["^[",["^1D"]]],"^Z",["^[",[["~$&","^1D"]]],"^18",["^[",[null]]]],"^7","~$re-frame.std-interceptors/path","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^Y",11,"^13",["^ ","^14",true,"^15",0,"^16",0,"^17",[["^[",["^1D"]]],"^Z",["^[",[["~$&","^1D"]]],"^18",["^[",[null]]],"^17",[["^[",["^1D"]]],"^1:",null,"^15",0,"^18",["^[",[null]],"^W",1,"^14",true,"^1;",[["^ ","^15",0,"^14",true,"^1<","^1="]],"^V",149,"^1>","^1?","^X",149,"^16",0,"^1@",true,"^Z",["^[",[["~$&","^1D"]]]],"~$ctx-handler->interceptor",["^ ","^S",null,"^T",["^ ","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",123,"^W",7,"^X",123,"^Y",31,"^Z",["^[",["^10",["^[",[["~$handler-fn"]]]]],"~:doc","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^7","~$re-frame.std-interceptors/ctx-handler->interceptor","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^Y",31,"^17",["^[",[["^1G"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^14",false,"^V",123,"^1>","^1=","^X",123,"^16",1,"^1@",true,"^Z",["^[",["^10",["^[",[["^1G"]]]]],"^1H","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^7","~$re-frame.std-interceptors/debug","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",15,"^W",1,"^X",15,"^Y",11,"^T",["^ ","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",15,"^W",6,"^X",15,"^Y",11],"^1<","^1="],"~$trim-v",["^ ","^7","~$re-frame.std-interceptors/trim-v","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",40,"^W",1,"^X",40,"^Y",12,"^T",["^ ","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",40,"^W",6,"^X",40,"^Y",12],"^1<","^1="],"~$after",["^ ","^S",null,"^T",["^ ","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",193,"^W",7,"^X",193,"^Y",12,"^Z",["^[",["^10",["^[",[["~$f"]]]]]],"^7","~$re-frame.std-interceptors/after","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^Y",12,"^17",["^[",[["~$f"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^14",false,"^V",193,"^1>","^1=","^X",193,"^16",1,"^1@",true,"^Z",["^[",["^10",["^[",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^S",null,"^T",["^ ","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",92,"^W",7,"^X",92,"^Y",30,"^Z",["^[",["^10",["^[",[["^1G"]]]]],"^1H","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^7","~$re-frame.std-interceptors/fx-handler->interceptor","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^Y",30,"^17",["^[",[["^1G"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^14",false,"^V",92,"^1>","^1=","^X",92,"^16",1,"^1@",true,"^Z",["^[",["^10",["^[",[["^1G"]]]]],"^1H","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^S",null,"^T",["^ ","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",60,"^W",7,"^X",60,"^Y",30,"^Z",["^[",["^10",["^[",[["^1G"]]]]],"^1H","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^7","~$re-frame.std-interceptors/db-handler->interceptor","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^Y",30,"^17",["^[",[["^1G"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^14",false,"^V",60,"^1>","^1=","^X",60,"^16",1,"^1@",true,"^Z",["^[",["^10",["^[",[["^1G"]]]]],"^1H","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^T",["^ ","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^V",230,"^W",6,"^X",230,"^Y",32],"^7","~$re-frame.std-interceptors/inject-global-interceptors","^U","/home/ulli/.cljs/.aot_cache/1.10.866/F7D51D7/re_frame/std_interceptors.cljc","^Y",32,"^W",1,"^V",230,"^X",230,"^1<","^1=","^1H","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^C","^@","^@","^@"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:path","~:tags","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:queue","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:inject-global-interceptors","~:error","~:coeffects","~:re-frame-path/db-store","~:end","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log","~:re-frame.std-interceptors/untrimmed-event"]],"~:order",["^2>","^28","^2I","^2K","^2<","^2=","^21","^23","^20","^2F","^29","^2L","^2B","^2;","^2J","^25","^2:","^26","^27","^2D","^1[","^2?","^22","^2G","^2C","^2A","^1Z","^2H","^2E","^2@","^24"]],"^1H","contains re-frame supplied, standard interceptors"]